name: CI

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm
      - name: npm install, build, and test
        run: npm ci && npm run test:report

      - name: Generate Coverage Report
        if: github.event_name == 'pull_request'
        id: coverage_comment_generator
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageSummaryPath = 'coverage/coverage-summary.json'; // Standard path for Jest's json-summary reporter

            if (!fs.existsSync(coverageSummaryPath)) {
              core.warning(`Coverage summary file not found at ${coverageSummaryPath}. Skipping comment.`);
              core.setOutput('comment_generated', 'false');
              return;
            }

            let summary;
            try {
              summary = JSON.parse(fs.readFileSync(coverageSummaryPath, 'utf8'));
            } catch (error) {
              core.warning(`Failed to parse JSON from ${coverageSummaryPath}: ${error.message}`);
              core.setOutput('comment_generated', 'false');
              return;
            }

            let message = `## ðŸ“Š Code Coverage Summary\n\n`;
            message += `| Category    | Percentage | Covered/Total |\n`;
            message += `|-------------|------------|---------------|\n`;

            const formatRow = (category, data) => {
              if (data && typeof data.pct === 'number' && typeof data.covered === 'number' && typeof data.total === 'number') {
                return `| ${category} | ${data.pct.toFixed(2)}% | ${data.covered}/${data.total} |\n`;
              }
              return `| ${category} | N/A | N/A |\n`;
            };

            message += formatRow('Statements', summary.total.statements);
            message += formatRow('Branches', summary.total.branches);
            message += formatRow('Functions', summary.total.functions);
            message += formatRow('Lines', summary.total.lines);

            fs.writeFileSync('coverage-comment-body.md', message);
            core.setOutput('comment_generated', 'true');
            console.log('Coverage comment body written to coverage-comment-body.md');

      - name: Apply Coverage Report to PR
        if: github.event_name == 'pull_request' && steps.coverage_comment_generator.outputs.comment_generated == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          filePath: coverage-comment-body.md
          header: code-coverage-summary
